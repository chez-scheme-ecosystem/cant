(load "loadme.scm")

(report (interpret 42))
(report (interpret ''hello))
;(report (interpret '(make _)))
(report (interpret '((make (xs xs)))))
(report (interpret '((make (xs xs)) 1 2 3)))
(report (interpret '(if #f 1 2)))
(report (interpret '(if #t 1 2)))
(report (interpret '((make ((#f) 'no) (_ 'yes)) #f)))
(report (interpret '((make ((#f) 'no) (_ 'yes)) #t)))
(report (interpret '`(hello ,(if #t 'yes 'no))))
(report (interpret '(2 .+ 3)))
(report (interpret '(hide (let x 55))))
(report (interpret '(hide (define (f) 136) (f))))
(report (interpret '(hide
                       (define (factorial n)
                         (match n
                           (0 1)
                           (_ (n .* (factorial (n .- 1))))))
                       (factorial 10))))

(loud-load "lib/hashmap.scm")
(loud-load "lib/format.scm")
(loud-load "lib/fillvector.scm")
(loud-load "lib/sort.scm")
(loud-load "lib/hashset.scm")
(loud-load "lib/memoize.scm")
(loud-load "lib/parson.scm")
(loud-load "lib/regex.scm")
(loud-load "lib/parse.scm")
(loud-load "lib/unify.scm")

(loud-load "eg/test-export-import.scm")
(loud-load "eg/test-quasiquote.scm")
(loud-load "eg/test-continuations.scm")
(loud-load "eg/test-pattern-matching.scm")
(loud-load "eg/test-use.scm")

(loud-load "eg/test-hashmap.scm")
(loud-load "eg/test-format.scm")
(loud-load "eg/test-fillvector.scm")
(loud-load "eg/test-sort.scm")
(loud-load "eg/test-hashset.scm")
(loud-load "eg/test-memoize.scm")
(loud-load "eg/test-regex.scm")
(loud-load "eg/test-parson.scm")
(loud-load "eg/test-parse.scm")
(loud-load "eg/test-unify.scm")

(loud-load "eg/compact-lambda.scm")
(loud-load "eg/sicp1.scm")
(loud-load "eg/sicp2.scm")
(loud-load "eg/lambdacompiler.scm")
(loud-load "eg/intset1.scm")
(loud-load "eg/intset2.scm")
(loud-load "eg/circuitoptimizer.scm")
(loud-load "eg/fizzbuzz.scm")
(loud-load "eg/failing.scm")
(loud-load "eg/lambdaterp.scm")
(loud-load "eg/tictactoe.scm")

(report-stats)

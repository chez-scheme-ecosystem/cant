;; Run a whole lot of examples, none of which should take long.

(print 42)
(print 'hello)
; (print (make _))
(print ((make (xs xs))))
(print ((make (xs xs)) 1 2 3))
(print (if #no 1 2))
(print (if #yes 1 2))
(print ((make ((#no) 'no) (_ 'yes)) #no))
(print ((make ((#no) 'no) (_ 'yes)) #yes))
(print `(hello ,(if #yes 'yes 'no)))
(print (2 .+ 3))
(print (hide (let x 55)))
(print (hide (to (f) 136) (f)))
(print (hide
        (to (factorial n)
          (match n
            (0 1)
            (_ (n .* (factorial (n .- 1))))))
        (factorial 10)))

(to (loud-load filename)
  (newline)
  (display "-------- ")
  (display filename)
  (display " --------")
  (newline)
  (use filename))

(loud-load "lib/memoize")
(loud-load "lib/parson")
(loud-load "lib/regex-match")
(loud-load "lib/parse")
(loud-load "lib/unify")

(loud-load "test/test-export-import")
(loud-load "test/test-quasiquote")
(loud-load "test/test-strings")
(loud-load "test/test-continuations")
(loud-load "test/test-pattern-matching")
(loud-load "test/test-use")

(loud-load "test/test-hashmap")
(loud-load "test/test-format")
(loud-load "test/test-fillvector")
(loud-load "test/test-sort")
(loud-load "test/test-hashset")
(loud-load "test/test-memoize")
(loud-load "test/test-regex")
(loud-load "test/test-parson")
(loud-load "test/test-parson-squared")
(loud-load "test/test-parse")
(loud-load "test/test-unify")
(loud-load "test/test-complex")
(loud-load "test/test-dd")
(loud-load "test/test-ratio")

(loud-load "eg/compact-lambda")
(loud-load "eg/sicp1")
(loud-load "eg/sicp2")
(loud-load "eg/lambdacompiler")
(loud-load "eg/intset1")
(loud-load "eg/intset2")
(loud-load "eg/circuitoptimizer")
(loud-load "eg/fizzbuzz")
(loud-load "eg/failing")
(loud-load "eg/lambdaterp")
(loud-load "eg/tictactoe")
(loud-load "eg/max-path-sum")

(loud-load "test/test-metaterp")
